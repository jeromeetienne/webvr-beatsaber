import GameEngine from '../engine/game-engine.js'
import GameObject from '../engine/game-object.js'
import GameObjectComponent from '../engine/game-object-component.js'
// import GameObjectManager from '../engine/game-object-manager.js'

import CubeGameObject from './cube-game-object.js'
import * as THREE from '../vendor/three.js/build/three.module.js';
import { BoxLineGeometry } from '../vendor/three.js/examples/jsm/geometries/BoxLineGeometry.js';

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
//	
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


// init GameEngine
let gameEngine = new GameEngine()

// create room itself
let roomObject3D = new THREE.LineSegments(
	new BoxLineGeometry(6, 6, 6, 10, 10, 10).translate(0, 3, 0),
	new THREE.LineBasicMaterial({ color: 0x808080 })
);
gameEngine.scene.add(roomObject3D);


// start animation loop
gameEngine.renderer.setAnimationLoop(render)

let cubesGameObjects = []
for (let i = 0; i < 200; i++) {
	let cubeGameObject = new CubeGameObject()
	roomObject3D.add(cubeGameObject.object3D)
	gameEngine.addGameObject(cubeGameObject)
	cubesGameObjects.push(cubeGameObject)
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
//	render()
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

const clock = new THREE.Clock()
let INTERSECTED;
let raycaster = new THREE.Raycaster()


function render() {

	/////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////
	//	When controller is selecting, reninit a cube
	/////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////

	if (gameEngine.controller.userData.isSelecting === true) {
		// take old cube
		let cubeGameObject = cubesGameObjects.shift()
		let parentObject3D = cubeGameObject.object3D.parent
		parentObject3D.remove(cubeGameObject.object3D)


		// generate 'new' cube
		cubeGameObject.resetPosition()
		cubesGameObjects.push(cubeGameObject)
		parentObject3D.add(cubeGameObject.object3D)
	}

	/////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////
	//	renderer.render
	/////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////

	gameEngine.update()
	gameEngine.render()
}
